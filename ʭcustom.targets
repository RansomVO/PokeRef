<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="fix.proj" />
  <Import Project="xslt.proj" />
  <Import Project="dependencies.proj" />

  <!-- Definition of standard folders -->
  <PropertyGroup>
    <RootOutputFolder>$(OutDir)www\</RootOutputFolder>
    <IntDir>obj\www\</IntDir>
  </PropertyGroup>

  <!-- Search and Replace values. -->
  <ItemGroup>
    <SearchStrings Include="([^_])Pokemon([ \,\:\.\'\&lt;])">
      <Replacement>$1Pokémon$2</Replacement>
      <RegEx>true</RegEx>
    </SearchStrings>
    <SearchStrings Include="{$CurrentDate}">
      <Replacement>$([System.DateTime]::Now.ToString("yyyy-MM-dd_HH:mm:ss"))</Replacement>
    </SearchStrings>
    <SearchStrings Include="id=&quot;anchor_">
      <Replacement>id="</Replacement>
    </SearchStrings>
    <SearchStrings Include="standalone=&quot;yes&quot;">
      <Replacement></Replacement>
    </SearchStrings>
  </ItemGroup>

  <!-- ==================================================================================================================================================== -->
  <!-- #region -These are the custom MSBuild Tasks that do the special transformation work for us. (E.G. resolving paths to included files, etc.) -->
  <!-- For Debugging VSBuildTasks: -->
  <UsingTask AssemblyFile="D:\rvanorman\OneDrive\Projects\VSBuildTasks\bin\Debug\VSBuildTasks.dll" TaskName="XslTransformation" Condition="'$(Configuration)' == 'DebugWork'" />
  <UsingTask AssemblyFile="D:\rvanorman\OneDrive\Projects\VSBuildTasks\bin\Debug\VSBuildTasks.dll" TaskName="SearchAndReplace" Condition="'$(Configuration)' == 'DebugWork'" />
  <UsingTask AssemblyFile="C:\users\ranso\OneDrive\Projects\VSBuildTasks\bin\Debug\VSBuildTasks.dll" TaskName="XslTransformation" Condition="'$(Configuration)' == 'DebugHome'" />
  <UsingTask AssemblyFile="C:\users\ranso\OneDrive\Projects\VSBuildTasks\bin\Debug\VSBuildTasks.dll" TaskName="SearchAndReplace" Condition="'$(Configuration)' == 'DebugHome'" />
  <!-- For builds in this project. -->
  <UsingTask AssemblyFile="packages\VSBuildTasks.dll" TaskName="XslTransformation" />
  <UsingTask AssemblyFile="packages\VSBuildTasks.dll" TaskName="SearchAndReplace" />

  <!-- #endregion -->

  <!-- ==================================================================================================================================================== -->
  <!-- #region NOTES -->
  <!-- ==================================================================================================================================================== -->
  <!-- 
    %(XXX.Dependencies);
      This makes it so the values in the work item are considered Inputs so when one changes, the item is rebuilt.
      E.G.
  -->
  <!-- #endregion -->

  <!-- ==================================================================================================================================================== -->
  <!-- #region -Copy files to the web folder without any modification. -->
  <!--
        NOTE: All source that should be on website, without modification, should use this Build Action instead of plain "Content".
          This puts the items in the bin\www\ so we have a complete, filtered view of the web site.
   -->
  <Target Name="WebContent" AfterTargets="BeforeBuild"
          Inputs="%(WebContent.Identity);%(WebContent.Dependencies);"
          Outputs="$(RootOutputFolder)%(WebContent.Identity)">

    <Copy SourceFiles="%(WebContent.Identity)" DestinationFolder="$(RootOutputFolder)%(RelativeDir)" SkipUnchangedFiles="true" />
  </Target>

  <!-- #endregion -->

  <!-- ==================================================================================================================================================== -->
  <!-- #region -Fix issues in source files. -->

  <!-- Update FixOutputFiles: Perform Search and replace on files. (E.G. "Pokemon" to "Pokémon", etc.) -->
  <Target Name="FixOutputFiles" AfterTargets="BeforeBuild"
          Inputs="%(FixOutputFile.Identity);%(FixOutputFile.Dependencies);"
          Outputs="$(RootOutputFolder)%(FixOutputFile.Identity)">

    <SearchAndReplace InputFilePath="%(FixOutputFile.Identity)" SearchStrings="@(SearchStrings)" OutputFilePath="$(RootOutputFolder)%(FixOutputFile.Identity)"/>
  </Target>

  <!-- Update FixIntermediateFile: Perform changes in FixOutputFiles, but output to intermediate (OBJ) dir. -->
  <Target Name="FixIntermediateFiles" AfterTargets="BeforeBuild"
          Inputs="%(FixIntermediateFile.Identity);%(FixIntermediateFile.Dependencies);"
          Outputs="$(IntDir)%(FixIntermediateFile.Identity)">

    <SearchAndReplace InputFilePath="%(FixIntermediateFile.Identity)" SearchStrings="@(SearchStrings)" OutputFilePath="$(IntDir)%(FixIntermediateFile.Identity)" />
  </Target>

  <!-- #endregion -->

  <!-- ==================================================================================================================================================== -->
  <!-- #region -Perform XSL Transforms. (Use *.page.xml) -->
  <Target Name="XslTransforms" AfterTargets="BeforeBuild" DependsOnTargets="FixIntermediateFiles;FixOutputFiles;"
          Inputs="%(XslTransform.Identity);%(RelativeDir)%(XslTransform.DependentUpon);%(XslTransform.Dependencies);xsl\global.xsl;_datafiles\settings.xml"
          Outputs="$(RootOutputFolder)%(RelativeDir)%(XslTransform.OutputFileName)">

    <XslTransformation ProjectDir="$(ProjectDir)" TargetDir="$(RootOutputFolder)"
                       XmlInputFilePath="%(XslTransform.Identity)"
                       XslInputFilePath="$(IntDir)%(RelativeDir)%(XslTransform.DependentUpon)"
                       SearchPath="$(IntDir);$(RootOutputFolder)"
                       OutputFilePath="$(RootOutputFolder)%(RelativeDir)%(XslTransform.OutputFileName)" />
  </Target>

  <!-- #endregion -->

  <!-- ==================================================================================================================================================== -->
  <!-- These are to make it so items can be changed in VS UI -->
  <ItemGroup>
    <AvailableItemName Include="WebContent">
      <Visible>false</Visible>
    </AvailableItemName>
    <AvailableItemName Include="FixOutputFile">
      <Visible>false</Visible>
    </AvailableItemName>
    <AvailableItemName Include="FixIntermediateFile">
      <Visible>false</Visible>
    </AvailableItemName>
    <AvailableItemName Include="XslTransform">
      <Visible>false</Visible>
    </AvailableItemName>
    <AvailableItemName Include="WebSitemap">
      <Visible>false</Visible>
    </AvailableItemName>
  </ItemGroup>
</Project>

